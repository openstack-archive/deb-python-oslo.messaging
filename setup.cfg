[metadata]
name = oslo.messaging
author = OpenStack
author-email = openstack-dev@lists.openstack.org
summary = Oslo Messaging API
description-file =
    README.rst
home-page = https://wiki.openstack.org/wiki/Oslo#oslo.messaging
classifier =
    Environment :: OpenStack
    Intended Audience :: Developers
    Intended Audience :: Information Technology
    License :: OSI Approved :: Apache Software License
    Operating System :: OS Independent
    Programming Language :: Python
    Programming Language :: Python :: 2
    Programming Language :: Python :: 2.7
    Programming Language :: Python :: 3
    Programming Language :: Python :: 3.4
    Programming Language :: Python :: 3.5

[files]
packages =
    oslo_messaging

[entry_points]
console_scripts =
    oslo-messaging-zmq-proxy = oslo_messaging._cmd.zmq_proxy:main
    oslo-messaging-zmq-broker = oslo_messaging._cmd.zmq_proxy:main
    oslo-messaging-send-notification = oslo_messaging.notify.notifier:_send_notification

oslo.messaging.drivers =
    rabbit = oslo_messaging._drivers.impl_rabbit:RabbitDriver
    zmq = oslo_messaging._drivers.impl_zmq:ZmqDriver
    amqp = oslo_messaging._drivers.impl_amqp1:ProtonDriver

    # This driver is supporting for only notification usage
    kafka = oslo_messaging._drivers.impl_kafka:KafkaDriver

    # To avoid confusion
    kombu = oslo_messaging._drivers.impl_rabbit:RabbitDriver

    # This is just for internal testing
    fake = oslo_messaging._drivers.impl_fake:FakeDriver
    pika = oslo_messaging._drivers.impl_pika:PikaDriver

oslo.messaging.executors =
    blocking = futurist:SynchronousExecutor
    eventlet = futurist:GreenThreadPoolExecutor
    threading = futurist:ThreadPoolExecutor

oslo.messaging.notify.drivers =
    messagingv2 = oslo_messaging.notify.messaging:MessagingV2Driver
    messaging = oslo_messaging.notify.messaging:MessagingDriver
    log = oslo_messaging.notify._impl_log:LogDriver
    test = oslo_messaging.notify._impl_test:TestDriver
    noop = oslo_messaging.notify._impl_noop:NoOpDriver
    routing = oslo_messaging.notify._impl_routing:RoutingDriver

oslo.messaging.pika.connection_factory =
    # Creates new connection for each create_connection call. Old-style behaviour
    # Uses a much more connections then single and read_write factories but still avalable as
    # an option
    new = oslo_messaging._drivers.pika_driver.pika_connection_factory:PikaConnectionFactory

    # Creates only one connection for transport and return it for each create connection call
    # it is default, but you can not use it with synchronous executor
    single = oslo_messaging._drivers.pika_driver.pika_connection_factory:SinglePikaConnectionFactory

    # Create two connections - one for listening and another one for sending and return them
    # for each create connection call depending on connection purpose. Creates one more connection
    # but you can use it with synchronous executor
    read_write = oslo_messaging._drivers.pika_driver.pika_connection_factory:ReadWritePikaConnectionFactory

oslo.messaging.zmq.matchmaker =
    # Matchmakers for ZeroMQ
    dummy = oslo_messaging._drivers.zmq_driver.matchmaker.zmq_matchmaker_base:MatchmakerDummy
    redis = oslo_messaging._drivers.zmq_driver.matchmaker.zmq_matchmaker_redis:MatchmakerRedis

oslo.config.opts =
    oslo.messaging = oslo_messaging.opts:list_opts

[build_sphinx]
source-dir = doc/source
build-dir = doc/build
all_files = 1

[upload_sphinx]
upload-dir = doc/build/html

[compile_catalog]
directory = oslo_messaging/locale
domain = oslo_messaging

[update_catalog]
domain = oslo_messaging
output_dir = oslo_messaging/locale
input_file = oslo_messaging/locale/oslo_messaging.pot

[extract_messages]
keywords = _ gettext ngettext l_ lazy_gettext
mapping_file = babel.cfg
output_file = oslo_messaging/locale/oslo_messaging.pot

[pbr]
warnerrors = true
